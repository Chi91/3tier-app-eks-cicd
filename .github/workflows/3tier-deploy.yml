
name: 3-tier-Application

on:
    push:
        branches: [ "main" ]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"3tier-eks-chi" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build ./api/Basic3TierAPI/Basic3TierAPI.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  
  docker-job:
      name: Build & push docker image
      runs-on: Ubuntu-latest
      steps: 
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{secrets.DOCKERHUB_USERNAME}}
              password: ${{secrets.DOCKERHUB_TOKEN}}

          - name: Build & push iamge backend
            uses: docker/build-push-action@v6
            with:
              file: ./api/Dockerfile
              push: true
              tags: chi91/3tier-backend-eks-cicd:latest

          - name: Build & push iamge frontend
            uses: docker/build-push-action@v6
            with:
              file: ./ui/Dockerfile
              push: true
              tags: chi91/3tier-frontend-eks-cicd:latest

  release-job: 
      name: deploy to cluster
      runs-on: ubuntu-latest
      needs: docker-job
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        
        - name: Configure AWS credentials 
          uses: aws-actions/configure-aws-credentials@v1
          with:
              aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
              aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
              aws-region: ${{vars.AWS_REGION}}

        - name: Change config File .kube
          run: aws eks update-kubeconfig --region ${{vars.AWS_REGION}} --name ${{vars.CLUSTER_NAME}}

        - name: Deploy on EKS Cluster
          run: | 
            kubectl apply -f ./kubernetes/chi-namespace.yml
            kubectl apply -f ./kubernetes/configmap.yml
            kubectl apply -f ./kubernetes/deploy-postgres.yml
            kubectl apply -f ./kubernetes/backend-services.yml
            kubectl apply -f ./kubernetes/deploy-backend.yml
            kubectl apply -f ./kubernetes/ingress.yml
            kubectl apply -f ./kubernetes/frontend-services.yml
            kubectl apply -f ./kubernetes/deploy-frontend.yml







    

    
